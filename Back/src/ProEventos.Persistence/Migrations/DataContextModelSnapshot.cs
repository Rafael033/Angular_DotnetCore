// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProEventos.Persistence.Contextos;

namespace ProEventos.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("PalestrantePalestranteEvento", b =>
                {
                    b.Property<int>("PalestranteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PalestrantesEventosIdEvento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PalestrantesEventosIdPalestrante")
                        .HasColumnType("INTEGER");

                    b.HasKey("PalestranteId", "PalestrantesEventosIdEvento", "PalestrantesEventosIdPalestrante");

                    b.HasIndex("PalestrantesEventosIdEvento", "PalestrantesEventosIdPalestrante");

                    b.ToTable("PalestrantePalestranteEvento");
                });

            modelBuilder.Entity("PalestranteRedeSocial", b =>
                {
                    b.Property<int>("PalestrantesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RedesSocialsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PalestrantesId", "RedesSocialsId");

                    b.HasIndex("RedesSocialsId");

                    b.ToTable("PalestranteRedeSocial");
                });

            modelBuilder.Entity("ProEventos.Domain.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataEvento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locality")
                        .HasColumnType("TEXT");

                    b.Property<int>("Lote")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PalestranteEventoIdEvento")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PalestranteEventoIdPalestrante")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QdtPessoas")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RedeSocialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RedeSocialId");

                    b.HasIndex("PalestranteEventoIdEvento", "PalestranteEventoIdPalestrante");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("ProEventos.Domain.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventosId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdEvento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Name")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventosId");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("ProEventos.Domain.Palestrante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cellphone")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SmallCV")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Palestrantes");
                });

            modelBuilder.Entity("ProEventos.Domain.PalestranteEvento", b =>
                {
                    b.Property<int>("IdEvento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPalestrante")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdEvento", "IdPalestrante");

                    b.ToTable("PalestrantesEventos");
                });

            modelBuilder.Entity("ProEventos.Domain.RedeSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdEvento")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdPalestrantes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RedeSocials");
                });

            modelBuilder.Entity("PalestrantePalestranteEvento", b =>
                {
                    b.HasOne("ProEventos.Domain.Palestrante", null)
                        .WithMany()
                        .HasForeignKey("PalestranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProEventos.Domain.PalestranteEvento", null)
                        .WithMany()
                        .HasForeignKey("PalestrantesEventosIdEvento", "PalestrantesEventosIdPalestrante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PalestranteRedeSocial", b =>
                {
                    b.HasOne("ProEventos.Domain.Palestrante", null)
                        .WithMany()
                        .HasForeignKey("PalestrantesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProEventos.Domain.RedeSocial", null)
                        .WithMany()
                        .HasForeignKey("RedesSocialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProEventos.Domain.Evento", b =>
                {
                    b.HasOne("ProEventos.Domain.RedeSocial", null)
                        .WithMany("Eventos")
                        .HasForeignKey("RedeSocialId");

                    b.HasOne("ProEventos.Domain.PalestranteEvento", null)
                        .WithMany("Evento")
                        .HasForeignKey("PalestranteEventoIdEvento", "PalestranteEventoIdPalestrante");
                });

            modelBuilder.Entity("ProEventos.Domain.Lote", b =>
                {
                    b.HasOne("ProEventos.Domain.Evento", "Eventos")
                        .WithMany("Lotes")
                        .HasForeignKey("EventosId");

                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("ProEventos.Domain.Palestrante", b =>
                {
                    b.HasOne("ProEventos.Domain.Evento", null)
                        .WithMany("Palestrantes")
                        .HasForeignKey("EventoId");
                });

            modelBuilder.Entity("ProEventos.Domain.Evento", b =>
                {
                    b.Navigation("Lotes");

                    b.Navigation("Palestrantes");
                });

            modelBuilder.Entity("ProEventos.Domain.PalestranteEvento", b =>
                {
                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProEventos.Domain.RedeSocial", b =>
                {
                    b.Navigation("Eventos");
                });
#pragma warning restore 612, 618
        }
    }
}
